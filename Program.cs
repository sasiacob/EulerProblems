using System;

namespace EulerProblems
{
    class Program
    {
        static void Main(string[] args)
        {
            Problem7();
        }

        public static void Problem1()
        {
            /*
             If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.

            Find the sum of all the multiples of 3 or 5 below 1000.
            */
            int sum = 0;
            for (int i = 1; i < 1000; i++)
            {
                if ((i % 3 == 0) || (i % 5 == 0))
                {
                    Console.WriteLine(i);
                    sum += i;

                }
            }
            Console.WriteLine($"Sum= {sum}");
        }

        public static void Problem2()
        {
            /*
             Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

                1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

                By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
            */
            int sum = 0;
            int[] sequence = new int[3] { 0, 1, 2 };

            do
            {
                sequence[0] = sequence[1];
                sequence[1] = sequence[2];
                sequence[2] = sequence[1] + sequence[0];

                if (sequence[0] % 2 == 0)
                {
                    sum += sequence[0];
                }

            } while (sequence[1] < 4000000);

            Console.WriteLine("Sum of even numbers: {0}", sum);



        }

        public static void Problem3()
        {
            /*
             The prime factors of 13195 are 5, 7, 13 and 29.

                What is the largest prime factor of the number 600851475143 ?
            */

            bool isPrime = true;
            Int64 x = 600851475143;
            Int64 largestNumber = 0;
            for (Int64 n = 2; n <= x; n++)
            {
                if (x % n == 0)
                {

                    isPrime = true;


                    for (Int64 i = 2; i <= n / 2; i++)
                    {
                        if (n % i == 0)
                        {
                            isPrime = false;
                            break;
                        }
                    }

                    if (isPrime)
                    {
                        Console.WriteLine(n);
                        largestNumber = n;
                    }

                    x /= n;
                }

            }

            Console.WriteLine("The largest prime number is: {0}", largestNumber);


        }

        public static void Problem4()
        {
            /*
          A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.

            Find the largest palindrome made from the product of two 3-digit numbers.

            */
            bool found = false;
            int no1 = 0, no2 = 0, max = 0; //variables to store the multipliers of the palindrome


            for (int i = 999; i >= 100; i--)
            {
                for (int j = 999; j >= 100; j--)
                {
                    if (IsPalindrome(i * j))
                    {



                        if (max < (i * j))
                        {
                            max = i * j;
                            no1 = i;
                            no2 = j;
                        }
                    }
                }


            }
        Finish:
            Console.WriteLine("{0} x {1} = {2}", no1, no2, (no1 * no2));



        }
        public static bool IsPalindrome(int n)
        {
            int n2 = n, sum = 0, r;
            while (n > 0)
            {
                r = n % 10;
                sum = (sum * 10 + r);
                n /= 10;
            }
            if (n2 == sum)
            {
                return true;
            }
            return false;

        }

        public static void Problem5()
        {
            { /*
             * 2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.

What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?*/


            }
            int n = 20; //1 to 10
            int productOfPrimes = 1;//for optimization we increase the number by its products of primes
            for (int i = 2; i < n; i++)
            {
                if (IsPrime(i))
                {
                    productOfPrimes *= i;
                }
            }
            Console.WriteLine(productOfPrimes);

            bool finish = false;
            n = 0;

            while (!finish)
            {
            Again:
                n += productOfPrimes;
                for (int i = 2; i <= 20; i++)
                {
                    if (n % i != 0)
                    {
                        goto Again;

                    }
                }


                finish = true;



            }
            Console.WriteLine(n);

        }
        public static bool IsPrime(int n)
        {
            if (n == 0 || n == 1)
            {
                return false;
            }
            for (int i = 2; i <= n / 2; i++)
            {
                if (n % i == 0)
                {
                    return false;
                }
            }
            return true;
        }

        public static void Problem6()
        {
            { /*
               * The sum of the squares of the first ten natural numbers is,

The square of the sum of the first ten natural numbers is,

Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is .

Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.
               */
            }

            int n = 100;//first 10 natural numbers
            int sumOfSquares = 0, squareSum = 0;
            for (int i = 1; i <= n; i++)
            {
                sumOfSquares += (i * i);
                squareSum += i;

            }
            squareSum *= squareSum;

            Console.WriteLine(sumOfSquares);
            Console.WriteLine(squareSum);
            Console.WriteLine(squareSum-sumOfSquares);
        }

        public static void Problem7()
        {
            int n = 10001; //n th prime number in total;
            int i = 0; //i th prime number
            int x = 1; //current number

            while (i < n)
            {
                x++;
                if (IsPrime(x))
                {
                    i++;
                }
            }
            Console.WriteLine( x);
        }
        public static void Problem698()
        {

        }
    }

}
